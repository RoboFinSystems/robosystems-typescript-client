name: Create Release & Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.ACTIONS_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Calculate new version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          VERSION_TYPE="${{ inputs.version_type }}"
          
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case "$VERSION_TYPE" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          
          NEW_VERSION="${major}.${minor}.${patch}"
          BRANCH_NAME="release/${NEW_VERSION}"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Update main branch version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"
          
          echo "Updating main branch version from $CURRENT_VERSION to $NEW_VERSION"
          
          # Update version in package.json
          npm version "$NEW_VERSION" --no-git-tag-version
          
          # Install dependencies to update lock file
          npm install
          
          # Commit and push to main
          git add package.json package-lock.json
          git commit -m "Bump version from $CURRENT_VERSION to $NEW_VERSION"
          git push origin main
      
      - name: Create release branch
        run: |
          BRANCH_NAME="${{ steps.new-version.outputs.branch_name }}"
          
          echo "Creating release branch: $BRANCH_NAME"
          
          # Create new branch from updated main
          git checkout -b "$BRANCH_NAME"
          
          # Push the release branch
          git push origin "$BRANCH_NAME"
          
          echo "âœ… Release branch created: $BRANCH_NAME"
      
      - name: Create summary
        run: |
          echo "## ðŸš€ SDK Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.current-version.outputs.current_version }} â†’ ${{ steps.new-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ steps.new-version.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "The npm package will be automatically published when the release branch is pushed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Monitor the publish workflow: [View Workflows](https://github.com/RoboFinSystems/robosystems-typescript-client/actions/workflows/publish.yml)" >> $GITHUB_STEP_SUMMARY